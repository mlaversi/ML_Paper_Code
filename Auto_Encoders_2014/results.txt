AnalysisException                         Traceback (most recent call last)
<ipython-input-39-44c44ab5e0f6> in <module>
     25         F.sum(F.when(F.col("Payment Format") == "virement", F.col("Amount Paid"))).alias("withdrawals"),
     26         F.sum(F.when(F.col("Payment Format") == "virement", F.col("Amount Received"))).alias("received"),
---> 27         F.max(F.when(F.col("suspicion_of_laundering"), 1).otherwise(0)).alias("has_laundering")
     28     ).drop("prev_timestamp")
     29 

C:\LOGICIELS\Anaconda3\lib\site-packages\pyspark\sql\group.py in agg(self, *exprs)
    173             assert all(isinstance(c, Column) for c in exprs), "all exprs should be Column"
    174             exprs = cast(Tuple[Column, ...], exprs)
--> 175             jdf = self._jgd.agg(exprs[0]._jc, _to_seq(self.session._sc, [c._jc for c in exprs[1:]]))
    176         return DataFrame(jdf, self.session)
    177 

C:\LOGICIELS\Anaconda3\lib\site-packages\py4j\java_gateway.py in __call__(self, *args)
   1321         answer = self.gateway_client.send_command(command)
   1322         return_value = get_return_value(
-> 1323             answer, self.gateway_client, self.target_id, self.name)
   1324 
   1325         for temp_arg in temp_args:

C:\LOGICIELS\Anaconda3\lib\site-packages\pyspark\errors\exceptions\captured.py in deco(*a, **kw)
    173                 # Hide where the exception came from that shows a non-Pythonic
    174                 # JVM exception message.
--> 175                 raise converted from None
    176             else:
    177                 raise

AnalysisException: [UNRESOLVED_COLUMN.WITH_SUGGESTION] A column or function parameter with name `suspicion_of_laundering` cannot be resolved. Did you mean one of the following? [`Account2`, `Account4`, `Receiving Currency`, `Amount Paid`, `From Bank`].;
'Aggregate [Account2#1389, Receiving Currency#1393], [Account2#1389, Receiving Currency#1393, count(Timestamp#1387) AS num_transactions#1446L, round(avg(avg_delay_transactions#1420), 0) AS avg_delay_transactions#1448, sum(CASE WHEN (Payment Format#1396 = virement) THEN Amount Paid#1394 END) AS withdrawals#1450, sum(CASE WHEN (Payment Format#1396 = virement) THEN Amount Received#1392 END) AS received#1452, max(CASE WHEN 'suspicion_of_laundering THEN 1 ELSE 0 END) AS has_laundering#1454]
+- Project [Timestamp#1387, From Bank#1388, Account2#1389, To Bank#1390, Account4#1391, Amount Received#1392, Receiving Currency#1393, Amount Paid#1394, Payment Currency#1395, Payment Format#1396, prev_timestamp#1408, (cast(Timestamp#1387 as double) - cast(prev_timestamp#1408 as double)) AS avg_delay_transactions#1420]
   +- Project [Timestamp#1387, From Bank#1388, Account2#1389, To Bank#1390, Account4#1391, Amount Received#1392, Receiving Currency#1393, Amount Paid#1394, Payment Currency#1395, Payment Format#1396, prev_timestamp#1408]
      +- Project [Timestamp#1387, From Bank#1388, Account2#1389, To Bank#1390, Account4#1391, Amount Received#1392, Receiving Currency#1393, Amount Paid#1394, Payment Currency#1395, Payment Format#1396, prev_timestamp#1408, prev_timestamp#1408]
         +- Window [lag(Timestamp#1387, -1, null) windowspecdefinition(Account2#1389, Receiving Currency#1393, Timestamp#1387 ASC NULLS FIRST, specifiedwindowframe(RowFrame, -1, -1)) AS prev_timestamp#1408], [Account2#1389, Receiving Currency#1393], [Timestamp#1387 ASC NULLS FIRST]
            +- Project [Timestamp#1387, From Bank#1388, Account2#1389, To Bank#1390, Account4#1391, Amount Received#1392, Receiving Currency#1393, Amount Paid#1394, Payment Currency#1395, Payment Format#1396]
               +- Filter ((Timestamp#1387 >= 2022/09/01 00:05) AND (Timestamp#1387 <= 2022/09/01 00:07))
                  +- Relation [Timestamp#1387,From Bank#1388,Account2#1389,To Bank#1390,Account4#1391,Amount Received#1392,Receiving Currency#1393,Amount Paid#1394,Payment Currency#1395,Payment Format#1396] csv

